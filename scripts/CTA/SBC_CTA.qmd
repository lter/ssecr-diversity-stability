---
title: "SBC CTA"
authors: "James Sturges"
date-modified: 10 Jan 2025
format: html
editor: visual
---

## **Section 1: Data Wrangling**

##### - Packages

```{r}
#| warning: false
#| message: false
library(raster) 
library(gdm)            
library(reshape2)         
library(lme4)             
library(MASS)             
library(AER)
library(vegan)              
library(ecotraj)
library(purrr)
library(RColorBrewer)
library(vegclust)
library(ecotraj)
library(smacof)
library(tidyverse)
library(lubridate)
```

##### - Raw Data Availability

```{r}
#20 year electrofishing dataset within Everglades National Park
raw_SBC = read.csv("data/.csv")
```

##### - Site Metadata

```{r}
#| warning: false
#site metadata (15 long-term sites with 3, 100m bouts of electrofishing)
site_coords <- read.csv("data/map_waypoints.csv")
```

##### - Species Metadata

```{r}
spp_code = read.csv("data/spp_codes.csv")
```

##### - Data Cleaning

##### - Joining SPP Metadata

```{r}
spp_code = spp_code %>% 
  mutate(speciescode = CODE) %>% 
  select(!CODE)

raw_map <- raw_map %>%
  mutate(speciescode = as.character(speciescode))

spp_code <- spp_code %>%
  mutate(speciescode = as.character(speciescode))

# Join the dataframes
map20 <- raw_map %>%
  left_join(spp_code, by = "speciescode")
```

##### - Unique Site ID

```{r}
map20 = map20 %>% 
  mutate(drainage.site.bout = paste0(drainage,site,"B",bout))

map20 = map20 %>% 
  mutate(drainage.site.year = paste0(drainage,site,"-", year))

site_coords <- site_coords %>%
      rename("drainage.site.bout" = "Site.Name")
```

##### - Joining Site Metadata

```{r}
#| warning: false
#| message: false
map20 <- left_join(map20, site_coords, by = "drainage.site.bout")

map20$Date <- mdy(map20$date)
```

##### - Grouping Variables

```{r}
# Ensure the 'year' column is numeric and create grouping labels
map20 <- map20 %>%
  mutate(year = as.numeric(as.character(year)),
         drainage.site = paste0(drainage,site),
         common_spp_name = paste0(COMMON_NAME, sep = "_", FISHES_DECAPODS))
```

##### - Species Summary Tables

```{r}
# Total observations of all species
df_spp_n = map20 %>% 
  group_by(COMMON_NAME, FISHES_DECAPODS, common_spp_name) %>% 
  summarise(total_catch = sum(catchnumber, na.rm = TRUE), .groups = 'drop')

# Total observations of all species by site
df_spp_n_site = map20 %>% 
  group_by(COMMON_NAME, FISHES_DECAPODS, common_spp_name, site) %>% 
  summarise(total_catch = sum(catchnumber, na.rm = TRUE), .groups = 'drop')

# Total observations of all species by site and year
df_spp_n_site_year = map20 %>% 
  group_by(COMMON_NAME, FISHES_DECAPODS, common_spp_name, site, year) %>% 
  summarise(total_catch = sum(catchnumber, na.rm = TRUE), .groups = 'drop')
```

##### - Filtered Observations

```{r}
retired_sites <- as.character(c('17', '19', '5'))

map20 = map20 %>% 
  filter(!(site %in% retired_sites))

map20 <- map20 %>%
  filter(!is.na(bout))

# Filter species with 100 or more total observations
filtered_species <- df_spp_n %>%
  filter(total_catch >= 100)

all_spp = c("American_eel", "Bluegill", "Redear", "Sunfishes", "Spotted_sunfish", "Dollar_sunfish", "Sailfin_molly",
         "Striped_mojarra", "Striped_mullet", "Hogchoker", "Tidewater_mojarra", "Bluespotted_sunfish", "Warmouth","Florida_gar", "Largemouth_bass", "Snook", "Bowfin", "Redfish", "Gray_snapper", "Mangrove_snapper", "Tarpon","Peacock_eel","Blue_tilapia", "Mayan_cichlid", "Jeweled_cichlid")

map20 <- map20 %>%
  filter(COMMON_NAME %in% all_spp)

```

## Section 2: Timeseries Plots

```{r}
map20 <- map20 %>% 
  mutate(drainage.site = factor(drainage.site,
                                levels = c(
                                  "RB7", "RB8", "RB9", "RB10", "RB11", 
                                  "RB12", "RB13", "RB14", "RB15", "RB16", 
                                  "RB18", "TB1", "TB2", "TB3", "TB4"
                                )))

map20 <- map20 %>% 
  mutate(year = factor(year, levels = c("1", 
                                       "2",
                                       "3", 
                                       "4", 
                                       "5", 
                                       "6", 
                                       "7", 
                                       "8", 
                                       "9", 
                                       "10", 
                                       "11",
                                       "12",
                                       "13",
                                       "14",
                                       "15", 
                                       "16",
                                       "17", 
                                       "18",
                                       "19",
                                       20)))

map20 <- map20 %>% 
  mutate(site = factor(site, levels = c("7", 
                                       "8",
                                       "9", 
                                       "10", 
                                       "11", 
                                       "12", 
                                       "13", 
                                       "14", 
                                       "15", 
                                       "16", 
                                       "18",
                                       "1",
                                       "2",
                                       "3", 
                                       "4")))
                    


rookery_branch = c("RB7", "RB12", "RB14", "RB15", "RB16", "RB18")
core = c("RB8", "RB9", "RB10", "RB11", "RB13")
tapron_bay = c("TB1", "TB2", "TB3", "TB4")
full = c("RB7", "RB12", "RB14", "RB15", "RB16", "RB18","RB8", "RB9", "RB10", "RB11", "RB13","TB1", "TB2", "TB3", "TB4")

df_core <- map20 %>% 
  filter(drainage.site %in% core)

df_rookery_branch <- map20 %>% 
  filter(drainage.site %in% rookery_branch)

df_tarpon_bay <- map20 %>% 
  filter(drainage.site %in% tapron_bay)

df_full <- map20 %>% 
  filter(drainage.site %in% full)
```

##### - Equally Sampled Sites

```{r}
# Extract the unique species names
unique_core <- unique(df_core$common_spp_name)
unique_rookery_branch <- unique(df_rookery_branch$common_spp_name)
unique_tarpon_bay <- unique(df_tarpon_bay$common_spp_name)
unique_full <- unique(df_full$common_spp_name)
```

##### - Color Vectors

```{r}
# Rookery Branch (6 colors)
colors_rookery_branch = c("#E41A1C", "#377EB8", "#4DAF4A", "#984EA3", "#FF7F00", "#FFFF33")

# Core (5 colors)
colors_core = c("#A65628", "#F781BF", "#999999", "#1B9E77", "#D95F02")

# Tarpon Bay (4 colors)
colors_tarpon_bay = c("#7570B3", "#E7298A", "#66A61E", "#E6AB02")

# Full (14 colors)
colors_full = c(
  "#E41A1C", "#377EB8", "#4DAF4A", "#984EA3", "#FF7F00", "#FFFF33", # Matching Rookery Branch
  "#A65628", "#F781BF", "#999999", "#1B9E77", "#D95F02", # Matching Core
  "#7570B3", "#E7298A", "#66A61E", "#E6AB02" # Matching Tarpon Bay
)

```

##### - All Sites Time-Series

```{r}
for (species in unique_full) {
  # Filter data for the current species
  species_data <- df_full %>%
    filter(common_spp_name == species) %>%
    group_by(year, drainage.site) %>%
    summarize(total_catch = sum(catchnumber, na.rm = TRUE), .groups = 'drop')
  
  # Calculate the mean number of individuals caught across all sites for each year
  mean_catch_per_year <- species_data %>%
    group_by(year) %>%
    summarize(mean_catch = mean(total_catch, na.rm = TRUE), .groups = 'drop')
  
  # Create the plot
  p <- ggplot(species_data, aes(x = year, y = total_catch, color = drainage.site)) +
    geom_line(aes(color = factor(drainage.site))) +
    geom_line(data = mean_catch_per_year, aes(x = year, y = mean_catch), 
              color = "black", linetype = "dashed", inherit.aes = FALSE) +
    scale_color_manual(values = colors_full) +  # Assign custom colors to sites
    labs(title = paste(species),
         x = "Years Since 2004", y = "Individuals Caught",
         color = "Site") +
    scale_x_continuous(expand = c(0, 0)) +  # Remove space on the x-axis
    scale_y_continuous(expand = c(0, 0)) +  # Remove space on the y-axis
    theme_classic() +
    theme(
      legend.position = "right",
      axis.text = element_text(size = 12, face = "bold"),
      axis.title = element_text(size = 14, face = "bold"),
      plot.title = element_text(size = 16, face = "bold"),
      axis.line = element_line(color = "black"),
      panel.border = element_blank(),
      axis.ticks.length = unit(0, "cm")
    ) +
    coord_cartesian(clip = 'off')  # Ensure lines extend fully to the axes
  
  # Print the plot to the screen
  # print(p)
  
  # Save the plot as a file or display it
  # ggsave(filename = paste0("figures/Total_Landings_Spp/full", "/", species, ".png"), plot = p, width = 8, height = 6, units = "in", dpi = 600)
}
```

##### - Core Sites Time-Series

```{r}

for (species in unique_core) {
  # Filter data for the current species
  species_data <- df_core %>%
    filter(common_spp_name == species) %>%
    group_by(year, drainage.site) %>%
    summarize(total_catch = sum(catchnumber, na.rm = TRUE), .groups = 'drop')
  
  # Calculate the mean number of individuals caught across all sites for each year
  mean_catch_per_year <- species_data %>%
    group_by(year) %>%
    summarize(mean_catch = mean(total_catch, na.rm = TRUE), .groups = 'drop')
  
  # Create the plot
  p <- ggplot(species_data, aes(x = year, y = total_catch, color = drainage.site)) +
    geom_line(aes(color = factor(drainage.site))) +
    geom_line(data = mean_catch_per_year, aes(x = year, y = mean_catch), 
              color = "black", linetype = "dashed", inherit.aes = FALSE) +
    scale_color_manual(values = colors_core) +  # Assign custom colors to sites
    labs(title = paste(species),
         x = "Years Since 2004", y = "Individuals Caught",
         color = "Site") +
    scale_x_continuous(expand = c(0, 0)) +  # Remove space on the x-axis
    scale_y_continuous(expand = c(0, 0)) +  # Remove space on the y-axis
    theme_classic() +
    theme(
      legend.position = "right",
      axis.text = element_text(size = 12, face = "bold"),
      axis.title = element_text(size = 14, face = "bold"),
      plot.title = element_text(size = 16, face = "bold"),
      axis.line = element_line(color = "black"),
      panel.border = element_blank(),
      axis.ticks.length = unit(0, "cm")
    ) +
    coord_cartesian(clip = 'off')  # Ensure lines extend fully to the axes
  
  # Print the plot to the screen
  # print(p)
  
  # Save the plot as a file or display it
  # ggsave(filename = paste0("figures/Total_Landings_Spp/core", "/", species, ".png"), plot = p, width = 8, height = 6, units = "in", dpi = 600)
}
```

##### - 5 + 5 Time-Series

```{r}
for (species in unique_rookery_branch) {
  # Filter data for the current species
  species_data <- df_rookery_branch %>%
    filter(common_spp_name == species) %>%
    group_by(year, drainage.site) %>%
    summarize(total_catch = sum(catchnumber, na.rm = TRUE), .groups = 'drop')
  
  # Calculate the mean number of individuals caught across all sites for each year
  mean_catch_per_year <- species_data %>%
    group_by(year) %>%
    summarize(mean_catch = mean(total_catch, na.rm = TRUE), .groups = 'drop')
  
  # Create the plot
  p <- ggplot(species_data, aes(x = year, y = total_catch, color = drainage.site)) +
    geom_line(aes(color = factor(drainage.site))) +
    geom_line(data = mean_catch_per_year, aes(x = year, y = mean_catch), 
              color = "black", linetype = "dashed", inherit.aes = FALSE) +
    scale_color_manual(values = colors_rookery_branch) +  # Assign custom colors to sites
    labs(title = paste(species),
         x = "Years Since 2004", y = "Individuals Caught",
         color = "Site") +
    scale_x_continuous(expand = c(0, 0)) +  # Remove space on the x-axis
    scale_y_continuous(expand = c(0, 0)) +  # Remove space on the y-axis
    theme_classic() +
    theme(
      legend.position = "right",
      axis.text = element_text(size = 12, face = "bold"),
      axis.title = element_text(size = 14, face = "bold"),
      plot.title = element_text(size = 16, face = "bold"),
      axis.line = element_line(color = "black"),
      panel.border = element_blank(),
      axis.ticks.length = unit(0, "cm")
    ) +
    coord_cartesian(clip = 'off')  # Ensure lines extend fully to the axes
  
  # Print the plot to the screen
  # print(p)
  
  # Save the plot as a file or display it
  # ggsave(filename = paste0("figures/Total_Landings_Spp/rookery_branch", "/", species, ".png"), plot = p, width = 8, height = 6, units = "in", dpi = 600)
}
```

##### - Tarpon Bay Time-Series

```{r}

for (species in unique_tarpon_bay) {
  # Filter data for the current species
  species_data <- df_tarpon_bay %>%
    filter(common_spp_name == species) %>%
    group_by(year, drainage.site) %>%
    summarize(total_catch = sum(catchnumber, na.rm = TRUE), .groups = 'drop')
  
  # Calculate the mean number of individuals caught across all sites for each year
  mean_catch_per_year <- species_data %>%
    group_by(year) %>%
    summarize(mean_catch = mean(total_catch, na.rm = TRUE), .groups = 'drop')
  
  # Create the plot
  p <- ggplot(species_data, aes(x = year, y = total_catch, color = drainage.site)) +
    geom_line(aes(color = factor(drainage.site))) +
    geom_line(data = mean_catch_per_year, aes(x = year, y = mean_catch), 
              color = "black", linetype = "dashed", inherit.aes = FALSE) +
    scale_color_manual(values = colors_tarpon_bay) +  # Assign custom colors to sites
    labs(title = paste(species),
         x = "Years Since 2004", y = "Individuals Caught",
         color = "Site") +
    scale_x_continuous(expand = c(0, 0)) +  # Remove space on the x-axis
    scale_y_continuous(expand = c(0, 0)) +  # Remove space on the y-axis
    theme_classic() +
    theme(
      legend.position = "right",
      axis.text = element_text(size = 12, face = "bold"),
      axis.title = element_text(size = 14, face = "bold"),
      plot.title = element_text(size = 16, face = "bold"),
      axis.line = element_line(color = "black"),
      panel.border = element_blank(),
      axis.ticks.length = unit(0, "cm")
    ) +
    coord_cartesian(clip = 'off')  # Ensure lines extend fully to the axes
  
  # Print the plot to the screen
  # print(p)
  
  # Save the plot as a file or display it
  # ggsave(filename = paste0("figures/Total_Landings_Spp/tarpon_bay", "/", species, ".png"), plot = p, width = 8, height = 6, units = "in", dpi = 600)
}
```

## Section 3: NMDS Ordinations

##### - Functional Groups

```{r}
#| output: false
#| echo: false
#| message: false
prey = c("Bluegill", "Redear", "Sunfishes", "Spotted_sunfish", "Dollar_sunfish",
         "Striped_mojarra", "Striped_mullet", "Hogchoker", "Tidewater_mojarra", "Bluespotted Sunfish", "Warmouth", "Sailfin_molly")

fisheries = c("Florida_gar", "Largemouth_bass", "Snook", "Bowfin", "Redfish", "Gray_snapper", "Tarpon")

invasive = c("Peacock_eel","Blue_tilapia", "Mayan_cichlid", "Jeweled_cichlid", "Spotted_tilapia")


full = c("American_eel", "Bluegill", "Redear", "Sunfishes", "Spotted_sunfish", "Dollar_sunfish", "Sailfin_molly",
         "Striped_mojarra", "Striped_mullet", "Hogchoker", "Tidewater_mojarra", "Bluespotted Sunfish", "Warmouth","Florida_gar", "Largemouth_bass", "Snook", "Bowfin", "Redfish", "Gray_snapper", "Mangrove_snapper", "Tarpon","Peacock_eel","Blue_tilapia", "Mayan_cichlid", "Jeweled_cichlid")
```

##### - Prey Assemblages

```{r}
df_prey_core = df_core %>% 
  filter(COMMON_NAME %in% prey)
df_prey_rb = df_rookery_branch %>% 
  filter(COMMON_NAME %in% prey)
df_prey_tb = df_tarpon_bay %>% 
  filter(COMMON_NAME %in% prey)
df_prey_full = df_full %>% 
  filter(COMMON_NAME %in% prey)
```

##### - Fisheries Assemblages

```{r}
df_fisheries_core = df_core %>% 
  filter(COMMON_NAME %in% fisheries)
df_fisheries_rb = df_rookery_branch %>% 
  filter(COMMON_NAME %in% fisheries)
df_fisheries_tb = df_tarpon_bay %>% 
  filter(COMMON_NAME %in% fisheries)
df_fisheries_full = df_full %>% 
  filter(COMMON_NAME %in% fisheries)
```

##### - Invasive Assemblages

```{r}
df_invasive_core = df_core %>% 
  filter(COMMON_NAME %in% invasive)
df_invasive_rb = df_rookery_branch %>% 
  filter(COMMON_NAME %in% invasive)
df_invasive_tb = df_tarpon_bay %>% 
  filter(COMMON_NAME %in% invasive)
df_invasive_full = df_full %>% 
  filter(COMMON_NAME %in% invasive)
```

##### - Full Assemblages

```{r}
df_full_core = df_core %>% 
  filter(COMMON_NAME %in% full)
df_full_rb = df_rookery_branch %>% 
  filter(COMMON_NAME %in% full)
df_full_tb = df_tarpon_bay %>% 
  filter(COMMON_NAME %in% full)
df_full_full = df_full %>% 
  filter(COMMON_NAME %in% full)
```

##### - Community Matrices

```{r}
community_matrix_full <- df_full %>%
  group_by(drainage, site, year, drainage.site.year, COMMON_NAME) %>%
  summarise(count = n()) %>%
  ungroup() %>%
  pivot_wider(names_from = COMMON_NAME, values_from = count, values_fill = 0)

community_matrix_full_nmds = community_matrix_full %>% 
  column_to_rownames(var = "drainage.site.year")

community_matrix_full_nmds = community_matrix_full_nmds %>%
  dplyr::select(-drainage, -site, -year)

nmds_full <- metaMDS(community_matrix_full_nmds)
```

##### - Plot: NMDS Ordination

```{r}
#| fig-width: 10
#| fig-height: 7.5
#| echo: false
#| message: false
# Extract NMDS coordinates


nmds_coords_full <- nmds_full$points

# Add site and year information to NMDS coordinates
nmds_data_full <- data.frame(nmds_coords_full, drainage.site.year = rownames(community_matrix_full_nmds))

community_matrix_full = community_matrix_full %>% 
  left_join(nmds_data_full)

community_matrix_full = community_matrix_full %>% 
  mutate(drainage.site = paste0(drainage,site))

community_matrix_full = community_matrix_full %>% 
 mutate(drainage.site = factor(drainage.site, levels = c(
                                  "RB7", "RB8", "RB9", "RB10", "RB11", 
                                  "RB12", "RB13", "RB14", "RB15", "RB16", 
                                  "RB18", "TB1", "TB2", "TB3", "TB4"
                                )))

rookery_branch <- c("RB7", "RB12", "RB14", "RB15", "RB16", "RB18")
core <- c("RB8", "RB9", "RB10", "RB11", "RB13")
tapron_bay <- c("TB1", "TB2", "TB3", "TB4")

shape_vector <- c(
  "RB7" = 15, "RB8" = 16, "RB9" = 16, "RB10" = 16, "RB11" = 16,
  "RB12" = 15, "RB13" = 16, "RB14" = 15, "RB15" = 15, "RB16" = 15,
  "RB18" = 15, "TB1" = 17, "TB2" = 17, "TB3" = 17, "TB4" = 17
)

# Add a new column for grouping
community_matrix_full <- community_matrix_full %>%
  mutate(group = case_when(
    drainage.site %in% rookery_branch ~ "Rookery Branch",
    drainage.site %in% core ~ "Core Sites",
    drainage.site %in% tapron_bay ~ "Tarpon Bay",
    TRUE ~ "Other"
  ))

# Ensure the group column is a factor with the desired order
community_matrix_full$group <- factor(community_matrix_full$group,
                                      levels = c("Core Sites", "Tarpon Bay", "Rookery Branch"))
# Plot NMDS
# Define the shape vector for each site

# Plot NMDS
plot_nmds_full <- ggplot(community_matrix_full, aes(x = MDS1, y = MDS2, color = drainage.site, shape = drainage.site, label = year)) +
  geom_point(size = 3) +
  labs(x = "NMDS1", y = "NMDS2") +
  scale_color_manual(values = colors_full) +
  scale_shape_manual(values = shape_vector) + # Apply shape vector directly
  guides(
    color = guide_legend(
      title = "    Site",position = "right",
      order = 2,
      override.aes = list(shape = shape_vector)
    ),
    shape = "none"  # Hide the separate shape legend
  ) +
  theme_classic() +
  theme(
    axis.text = element_text(size = 20),
    axis.title = element_text(size = 24),
    legend.background = element_rect(color = "black", fill = "white")
  )

# Print NMDS plot
print(plot_nmds_full)

# Save the plot
ggsave(filename = paste0("figures/NMDS/full/full_nmds_plot.png"),
       plot = plot_nmds_full, width = 8, height = 6, units = "in", dpi = 600)
```

##### - Plot: NMDS Group Hulls

```{r}
# Function to create convex hulls
create_hull <- function(data) {
  data[chull(data$MDS1, data$MDS2), ]
}

# Create convex hulls for each group
hulls_groups <- community_matrix_full %>%
  group_by(group) %>%
  do(create_hull(.))

# Plot NMDS with convex hulls for 3 groups with different alpha values
# Plot NMDS with convex hulls for 3 groups with different alpha values
plot_nmds_groups <- ggplot(community_matrix_full, aes(x = MDS1, y = MDS2, color = drainage.site, shape = group, label = year)) +
  geom_point(size = 3) +
  geom_polygon(data = hulls_groups, aes(x = MDS1, y = MDS2, group = group, alpha = group), 
               fill = "black", color = "black") +
  labs(x = "NMDS1", y = "NMDS2") +
  scale_color_manual(values = colors_full) +
  scale_shape_manual(values = c("Core Sites" = 16, "Tarpon Bay" = 17, "Rookery Branch" = 15)) +
  scale_alpha_manual(values = c("Core Sites" = 0.8, "Tarpon Bay" = 0.5, "Rookery Branch" = 0.2)) +
  guides(
    color = guide_legend(
      title = "     Site",
      position = "right",
      order = 2,
      override.aes = list(shape = shape_vector)
    ),
    alpha = guide_legend(
      title = "Sampling Zone",
      order = 1
    ),
    shape = "none"  # Hide the separate shape legend
  ) +
  theme_classic() +
  theme(
    axis.text = element_text(size = 20),
    axis.title = element_text(size = 24),
    legend.background = element_rect(color = "black", fill = "white")
  )

# Print the NMDS plot with group polygons
print(plot_nmds_groups)

# Save the plot
ggsave(filename = "figures/NMDS/full/full_nmds_plot_groups_alpha.png",
       plot = plot_nmds_groups, width = 8, height = 6, units = "in", dpi = 600)
```

##### - Plot: NMDS Site Hulls

```{r}
# Plot NMDS with convex hulls based on 15 sites
# Create hulls for each site
hulls_sites <- community_matrix_full %>%
  group_by(drainage.site) %>%
  do(create_hull(.))

# Plot NMDS with convex hulls based on 15 sites
plot_nmds_sites <- ggplot(community_matrix_full, aes(x = MDS1, y = MDS2, color = drainage.site, shape = drainage.site, label = year)) +
  geom_point(size = 3) +
  geom_polygon(data = hulls_sites, aes(fill = drainage.site, group = drainage.site), alpha = 0.2) +
  labs(x = "NMDS1", y = "NMDS2") +
  scale_color_manual(values = colors_full) +
  scale_shape_manual(values = shape_vector) +
  scale_fill_manual(values = colors_full) +
  theme_classic() +
  theme(
    axis.text = element_text(size = 20),
    axis.title = element_text(size = 24),
    legend.background = element_rect(color = "black", fill = "white")
  )

# Print the NMDS plot with site polygons
print(plot_nmds_sites)

# Save the plot
ggsave(filename = "figures/NMDS/full/full_nmds_plot_sites.png",
       plot = plot_nmds_sites, width = 8, height = 6, units = "in", dpi = 600)
```

## Section 4: CTA Ordinations

##### - Full \~ All Sites

```{r}
#| echo: false
#| warning: false
#| message: false
#| ig-width: 7
#| fig-height: 7
#| output: false

comm_best_sites = community_matrix_full %>%
  dplyr::select(-drainage, -site, -year, -drainage.site.year, -MDS1, -MDS2, -drainage.site, -group)

D <- vegan::vegdist(comm_best_sites,"bray")

trajectoryPCoA(D, sites = community_matrix_full$site, surveys = community_matrix_full$year, 
               traj.colors = colors_full, lwd = 2)

# Add the legend
legend("right", bty = "n", legend = c("RB7", "RB8", "RB9", "RB10", "RB11", 
                                         "RB12", "RB13", "RB14", "RB15", "RB16", 
                                         "RB18", "TB1", "TB2", "TB3", "TB4"),  
       col = c("#E41A1C", "#377EB8", "#4DAF4A", "#984EA3", "#FF7F00", "#FFFF33",
               "#A65628", "#F781BF", "#999999", "#1B9E77", "#D95F02",
               "#7570B3", "#E7298A", "#66A61E", "#E6AB02"), lwd = 2)

# Capture the plot output
trajectory_plot_1 <- recordPlot()

# Save the plot as a PNG file
png(filename = "figures/CTA/full/full_trajectory_plot.png", width = 8, height = 8, res = 300, units = "in")
trajectoryPCoA(D, sites = community_matrix_full$site, surveys = community_matrix_full$year, 
               traj.colors = colors_full, lwd = 2)

# Add the legend
legend("right", bty = "n", legend = c("RB7", "RB8", "RB9", "RB10", "RB11", 
                                         "RB12", "RB13", "RB14", "RB15", "RB16", 
                                         "RB18", "TB1", "TB2", "TB3", "TB4"),  
       col = c("#E41A1C", "#377EB8", "#4DAF4A", "#984EA3", "#FF7F00", "#FFFF33",
               "#A65628", "#F781BF", "#999999", "#1B9E77", "#D95F02",
               "#7570B3", "#E7298A", "#66A61E", "#E6AB02"), lwd = 2)

dev.off()
```

##### - Full \~ Core Sites

```{r}
#| echo: false
#| warning: false
#| message: false
#| ig-width: 7
#| fig-height: 7

selected_sites <- as.character(c('8', '9', '10', '11', '12'))

best_sites = community_matrix_full %>%
  filter(site %in% selected_sites)

comm_best_sites = best_sites %>%
  dplyr::select(-drainage, -site, -year, -drainage.site.year, -MDS1, -MDS2, -drainage.site, -group)

D <- vegan::vegdist(comm_best_sites,"bray")

custom_palette <- c("#377EB8", "#4DAF4A", "#984EA3", "#FF7F00", "#A65628") 

# Generate the plot using trajectoryPCoA
trajectoryPCoA(D, sites = best_sites$site, surveys = best_sites$year, traj.colors = custom_palette, lwd = 2) 
legend("topright", bty="n", legend=c("RB 8", "RB 9", "RB 10", "RB 11", "RB 13"),  col = c("#377EB8", "#4DAF4A", "#984EA3", "#FF7F00", "#A65628"), lwd=2)

# Capture the plot output
trajectory_plot <- recordPlot()

# Save the plot as a PNG file
png(filename = "figures/CTA/full/core_sites_trajectory_plot.png", width = 8, height = 8, res = 300, units = "in")
trajectory_plot
dev.off()
```

##### - Full \~ TB Sites

```{r}
#| echo: false
#| warning: false
#| message: false
#| ig-width: 7
#| fig-height: 7

selected_sites <- as.character(c('1', '2', '3', '4'))

best_sites = community_matrix_full %>%
  filter(site %in% selected_sites)

comm_best_sites = best_sites %>%
  dplyr::select(-drainage, -site, -year, -drainage.site.year, -MDS1, -MDS2, -drainage.site, -group)

D <- vegan::vegdist(comm_best_sites,"bray")

custom_palette <- c("#7570B3", "#E7298A", "#66A61E", "#E6AB02") 

# Generate the plot using trajectoryPCoA
trajectoryPCoA(D, sites = best_sites$site, surveys = best_sites$year, traj.colors = custom_palette, lwd = 2) 
legend("topright", bty="n", legend=c("TB 1", "TB 2", "TB 3", "TB 4"),  col = c("#7570B3", "#E7298A", "#66A61E", "#E6AB02"), lwd=2)

# Capture the plot output
trajectory_plot <- recordPlot()

# Save the plot as a PNG file
png(filename = "figures/CTA/full/tarpon_bay_trajectory_plot.png", width = 8, height = 8, res = 300, units = "in")
trajectory_plot
dev.off()
```

##### - Full \~ 5+5 Sites

```{r}
#| echo: false
#| warning: false
#| message: false
#| ig-width: 7
#| fig-height: 7

selected_sites <- as.character(c('7', '12', '14', '15', '16', '17', '18'))

best_sites = community_matrix_full %>%
  filter(site %in% selected_sites)

comm_best_sites = best_sites %>%
  dplyr::select(-drainage, -site, -year, -drainage.site.year, -MDS1, -MDS2, -drainage.site, -group)

D <- vegan::vegdist(comm_best_sites,"bray")

custom_palette <- c("#E41A1C", "#FFFF33",
  "#F781BF", "#999999", "#1B9E77", "#D95F02") 

# Generate the plot using trajectoryPCoA
trajectoryPCoA(D, sites = best_sites$site, surveys = best_sites$year, traj.colors = custom_palette, lwd = 2) 
legend("topright", bty="n", legend=c("RB 7", "RB 12", "RB 14", "RB 15","RB 16","RB 17", "RB 18"),  col = c("#E41A1C", "#FFFF33",
  "#F781BF", "#999999", "#1B9E77", "#D95F02"), lwd=2)

# Capture the plot output
trajectory_plot <- recordPlot()

# Save the plot as a PNG file
png(filename = "figures/CTA/full/5+5_trajectory_plot.png", width = 8, height = 8, res = 300, units = "in")
trajectory_plot
dev.off()
```

##### - Individual Sites

```{r}
# Split the data frame by 'site' column
comm_matrix_list <- split(community_matrix_full, community_matrix_full$site)
```

```{r}
# Initialize an empty list to store the cleaned data frames
comm_matrix_list_nmds <- list()

# Loop through each element in the original comm_matrix_list
for (site_name in names(comm_matrix_list)) {
  # Extract the current data frame for this site
  df <- comm_matrix_list[[site_name]]
  
  # Clean the data frame: remove unnecessary columns and set row names
  cleaned_df <- df %>%
    select(-drainage, -site, -year, -MDS1, -MDS2, -drainage.site, -group) %>%
    column_to_rownames(var = "drainage.site.year")
  
  # Store the cleaned data frame in the new list
  comm_matrix_list_nmds[[site_name]] <- cleaned_df
}


# Create an empty list to store the results
dist_list <- list()

# Iterate over each matrix in the list
for (i in seq_along(comm_matrix_list_nmds)) {
  # Perform the vegdist operation to calculate Bray-Curtis dissimilarity
  dist_list[[i]] <- vegdist(comm_matrix_list_nmds[[i]], method = "bray")
}
```

```{r}
# Initialize plot list and file name list
plot_list <- list()
plot_filenames <- c()

# Generate plots for each site and store the filenames
for (i in seq_along(dist_list)) {
  # Extract the current site and year from the corresponding comm_matrix_list
  site <- comm_matrix_list[[i]]$site
  year <- comm_matrix_list[[i]]$year
  
  # Get the color for the current plot
  color <- colors_full[i]
  
  # Open a new PNG device
  png(filename = paste0("figures/CTA/sites/full/trajectory_plot_", site, ".png"),
      width = 8, height = 8, res = 300, units = "in")
  
  # Generate the trajectory plot for the current site
  trajectoryPCoA(dist_list[[i]],
                 sites = site,
                 surveys = year,
                 traj.colors = color,
                 lwd = 2,
                 survey.labels = TRUE)
  
  # Close the PNG device to save the file
  dev.off()
  print
}
```

```{r}
# Create empty lists to store trajectory variables
# add site names to this work flow and keep sites in the excel output

length_list <- list()
angles_list <- list()
direct_list <- list()

# Iterate over each dist object in the list
for (i in seq_along(dist_list)) {
  # Extract SITE and Year values from the list_of_sites
  site <- comm_matrix_list[[i]]$site
  year <- comm_matrix_list[[i]]$year

  # Compute trajectory lengths
  Lengths <- trajectoryLengths(dist_list[[i]], sites = site, surveys = year)
  length_list[[i]] <- Lengths

  # Compute trajectory angles
  angles <- trajectoryAngles(dist_list[[i]], sites = site, surveys = year)
  angles_list[[i]] <- angles

  # Compute trajectory directionality
  direct <- trajectoryDirectionality(dist_list[[i]], sites = site, surveys = year)
  direct_list[[i]] <- direct

  # Define file paths with the matrix names (or any suitable naming scheme)
  matrix_name <- paste0("matrix_", i)
  lengths_file <- paste0("tables/full/lengths/lengths_", matrix_name, ".csv")
  angles_file <- paste0("tables/full//angles/angles_", matrix_name, ".csv")
  directionality_file <- paste0("tables/full/directionality/directionality_", matrix_name, ".csv")

  # Save each metric to CSV
  write.csv(as.data.frame(Lengths), lengths_file, row.names = FALSE)
  write.csv(as.data.frame(angles), angles_file, row.names = FALSE)
  write.csv(as.data.frame(direct), directionality_file, row.names = FALSE)
}
```
